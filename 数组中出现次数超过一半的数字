##数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
###由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        # write code here
        leghth = len(numbers)
        for i in numbers:     ####当i=2
            x = 0             ####在这放着是循环完一轮的时候x就会清零
            for j in numbers: ###j就从头开始循环，遇到相等的就x加一
                if i == j:
                    x += 1
            if x > leghth/2:  ###当上面的循环完毕时x就会计算出来，在此处做判断
                return i
        return 0
###字典查法
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        dict = {}
        for no in numbers:
            if not dict.has_key(no):###(Dictionary) has_key() 函数用于判断键是否存在于字典中，如果键在字典dict里返回true，否则返回false。
                dict[no] = 1
            else:
                dict[no] = dict[no] + 1   ###dict = {'a': 1, 'b': 2, 'b': '3'}  >>> dict['b']  输出'3'
            if dict[no] > len(numbers)/2:  
                return no
        return 0
