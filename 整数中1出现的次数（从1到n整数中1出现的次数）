求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
解法：
#join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。
#count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。
# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        return ''.join(map(str,range(n+1))).count('1')##将map运算出的字符串用空格连接，再计算出1的个数
解法：
def NumberOf1Between1AndN_Solution(self, n):
    if n < 1:
        return 0
    mult, sumTimes = 1, 0
    while n//mult:
        div, mod = divmod(n, mult*10)                    ##div=商（高位），mod=余数，他们依次是个位，十位，百位
        curNum, curMod = divmod(mod, mult)               ##curNUM=此时位的数字，curMod=低一位的数字，依次为（个位，0）（十位，个位）（百位，剩余位）（）
        if curNum > 1:                                   ##此时位的数字大于1的情况
            sumTimes += div*mult + mult
        elif curNum == 1:
            sumTimes += div*mult + curMod + 1
        else:
            sumTimes += div*mult
        mult = mult*10
    return sumTimes
http://www.cnblogs.com/nailperry/p/4752987.html
