输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）

思路：
    1. 把复制的结点链接在原始链表的每一对应结点后面 
     A-A'-B-B'
        
    2. 把复制的结点的random指针指向被复制结点的random指针的下一个结点
  
    3. 拆分成两个链表，奇数位置为原链表，偶数位置为复制链表，注意复制链表的最后一个结点的next指针
    不能跟原链表指向同一个空结点None，next指针要重新赋值None(判定程序会认定你没有完成复制）

# -*- coding:utf-8 -*-
# class RandomListNode:
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None
class Solution:
    # 返回 RandomListNode
    def Clone(self, pHead):
        if not pHead:
            return None
         
        dummy = pHead
         
        # first step, N' to N next
        while dummy:
            dummynext = dummy.next
            copynode = RandomListNode(dummy.label)   ##新建一个复制点N'
            copynode.next = dummynext                ##N的next赋给N’的next
            dummy.next = copynode                    ##N'加入N后面
            dummy = dummynext                        ##向后移一位
         
        dummy = pHead
         
        # second step, random' to random'
        while dummy:
            dummyrandom = dummy.random             ##H的random指向H，那就让N’的random指向H‘   
            copynode = dummy.next     
            if dummyrandom:
                copynode.random = dummyrandom.next #将H的next,也就是H‘赋给N’的random
            dummy = copynode.next                  ##向后移一位
         
        # third step, split linked list
        dummy = pHead                              ##负责拆分
        copyHead = pHead.next
        while dummy:
            copyNode = dummy.next            
            dummynext = copyNode.next
            dummy.next = dummynext                ##将中间复制的剔除掉
            if dummynext:
                copyNode.next = dummynext.next    ###将复制的和复制的连上
            else:
                copyNode.next = None
            dummy = dummynext                     ##向后移一位
 
        return copyHead
