###HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
###今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。
###但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
###例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
###给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
思路：
##res表示i为array末尾索引时的连续子数组的最大和
以[-2,-3,4,-1,-2,1,5,-3]为例
i=1
dp = -2
res = -2

i=2
dp = -3
res = -2

i = 3
dp = 4
res = 4

i = 4
dp = 3
res = 4
逐渐递推可以发现
dp = max(dp + array[i],array[i])##包含array[i]的连续数组最大值
res = max(dp,res) ##记录当前所有子数组的和的最大值
解法：
class Solution:
    def FindGreatestSumOfSubArray(self, array):
        # write code here
        res = array[0]
        dp = array[0]
        n = len(array)
        for i in range(1,n):
            dp = max(dp + array[i],array[i])
            res = max(dp,res)
        return res
